#include <bits/stdc++.h>
using namespace std;

// Создание своей функции
int sum(int x, int y) {
	return x + y;
}
// Отличия от питона:
// 1) Нельзя переопределять функцию,
// т. е. если написать новую функцию plus - 
// она не заменит предыдущую, а будет compile error
// (на самом деле можно, но это работает совсем не так, как в питоне)
// 2) Все аргументы копируются, вне зависимости от типов (об этом ниже)

// void - функция, которая ничего не возвращает
void write_numbers(int x, int y) {
	cout << "First number: " << x << endl;
	cout << "Second number: " << y << endl;
}

// Данная функция ничего не делает, потому что оба аргумента копируются
void bad_add(int x, vector<int> a) {
	a.push_back(x);
	x++;
}

// Чтобы аргумент не копировался, 
// нужно ставить & после типа
void good_add(int& x, vector<int>& a) {
	a.push_back(x);
	x++;
}

// Если при этом написать const, то компилятор не даст изменить значение аргумента
// Нужно чтобы избежать копирования
int get_mid(const vector<int>& a) {
	return a[a.size() / 2];
}

// main - это тоже функция, но особая
// Особенность ее в том, что она запускается самой первой
int main() {
	int x = 3, y = 4;
	// Синтаксис вызова функций
	int z = sum(x, y);
	cout << z;
}
